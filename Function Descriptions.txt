FUNCTIONS DESCRIPTION (Not Finished)

**************************************************************************************************************************************
FUNCTION: Read all switches

**************************************************************************************************************************************
FUNCTION: READING THE SPEED POTENTIOMETER:
0) void read_and_calibrate_speedPot() {}





**************************************************************************************************************************************
FUNCTION: Read raw values of joystiuck
//////////////// FUNCTION: Read the Uncalibrated JoyStick Values ////////////////
void readRawJoystickValues() {}
void store_Yvalues_to_ESC() {}
void store_XTURNvalues_to_ESC() {}





//////////////// FUNCTION: Read the Uncalibrated JoyStick Values ////////////////
void readRawJoystickValues() {
  int left_x = analogRead(leftStick_x);   int right_x = analogRead(rightStick_x);         //read the uncalibrated stick
  int left_y = analogRead(leftStick_y);   int right_y = analogRead(rightStick_y);
  int leftStick_sw = digitalRead(leftStick_sw); int rightStick_sw = digitalRead(rightStick_sw);
  if (printCalib == 1) {
   Serial.print("    C1 RY: ");     Serial.print(right_y);
   Serial.print("     ");
  }
}
void store_Yvalues_to_ESC() {
  ESC0 = defaultStickSpeed;
  ESC_1 = ESC_Y1;
  ESC_2 = ESC_Y2;
  ESC_3 = ESC_Y3;
  ESC_4 = ESC_Y4;
  ESC_5 = ESC_Y5;
  ESC_6 = ESC_Y6;
}
void store_XTURNvalues_to_ESC() {
  ESC0 = defaultStickSpeed_x;
  ESC_1 = ESC_X1;
  ESC_2 = ESC_X2;
  ESC_3 = ESC_X3;
  ESC_4 = reverseESC(4, ESC_X4);             //"reverseESC()" basically does this: map(ESC_X4, lowest[4],180, 180,lowest[4]); simple
  ESC_5 = reverseESC(5, ESC_X5);
  ESC_6 = reverseESC(6, ESC_X6);
}
**************************************************************************************************************************************
//FUNCTION: Joysticks to Servo Values

//Paramaters: calibratejoystick(stick name, lowest pos of joystick, rest pos of joystick, highest pos of joystick, reversed?):
//FUNC: Maps Joystick perfectly as 0-90-180  (stick down-stick middle-stick up)

1) void turn_sticks_to_servo() {}:

------------------------------------------------------------
FUNCTIONS USED:
int calibrateJoystick(int stick, int low, int middle, int high, bool reverse){}:

//Take the analog values, stabalize the values, unreverse values, and turn into  Servo positions
/*DESCRIPTION
  "calibrateJoystick()" just takes in a stick and remap the highest, lowest, and middle position of a joystick to desirable values
    if its reversed, it fixes it
    if its still unstable, it stabalizes it by remapping to 512 as middle (1023/2=512)
    and finally, it turns the 0-512-1023 value to servo positions (0-90-180) for our ESCs
    (ESCs are devices that take DC power and converts it into AC current to drive the brushless motors. each of the 3 wires of the ESC gives off pulses of different lengths and intervals to the motor to keep it spinning)
 
------------------------------------------------------------
OTHER FUNCTIONS USED:
//Other functions included in the "calibrateJoystick()" function:

2) int stabilizeJoystick( int stick, int lower, int middle, int upper){}
3) int map2Servo(int calibratedStick){}
4) int isreverse(int stick, bool reverse){}


**************************************************************************************************************************************
FUNCTION: ESC to Neutral Positions

//Paramaters: calib_neutral(index#to store neutral position of motor, stickAxis, low neutral of motor, high neutral of motor)
//FUNC: Turn the 0-90-180 to 0-(ESC middle neutral position)-180
5) void calibrate_sticks_to_ESCs() {}

------------------------------------------------------------
FUNCTIONS USED:
6) int calib_neutral(int index, int stick, int lowNeutral, int highNeutral){}
7) int calib_neutral(int index, int stick){}

/*DESCRIPTION
  "calibNeutral()" takes it 3 things:
  a.) It takes a stick variable (lets say the y axis (up/down) of the right joystick)
  b.) The range of the neutral position of a specific ESC (the values where the motor is in between forward and reverse and doesnt turn)
  c.) the  index number, basically the position where the MIDDLE neutral position will be stored (in the "middle[]" array)

  and does 2 things:
  a.) it takes the middle position of the neutral range and stores that middle neutral position to the array "middle" that we defined before the "void loop()" function
  b.) It then maps the joystick so that the middle neutral position becomes the new middle value and then returns it so that we can equal it to the stick of our choosing
*/

**************************************************************************************************************************************
FUNCTION: Limit the ESC Values
//FUNC: lets the Speed Potentiometer limits the joystick ranges; redefines lowest position fo ESC (was 0 before)
//(ESC lowest position allowed by SpeedPot)-(ESC middle neutral position)-(ESC highest position allowed by SpeedPot) 

8) void limitESCs_to_SpeedPot(){}
9) limitESCs_to_Percent(int percent){}
------------------------------------------------------------
FUNCTIONS USED:
//PARAMETER DEFINATION:
/* For the 2 functions below: 
motorSpeedCalib([index to store the lowest position],[what ESC and axis?],[lowest 2nd neutral position that will be stored in the "lowest[]" array],[the middle neutral position of the ESC that we got from the "calib_neutral()" function],[the speed Pot value that will constrain the motor speed])*/                              

10) int motorSpeedCalib(int index, int stick, int lowestVal, int speedPot){}
11) int motorSpeedCalib(int index, int stick, int speedPot){}

//DESCRIPTION:
/* For the 2nd fucntion
This functions allows the joystick to be able to be constrained by the speed potentiometer. 
Basically, if we move the potentiometer slider to the right, all motors will be able to operate at 100% forward (Servo value 180) and backward (Servo value 0 for the 2nd function and whatever "lowestVal" is set to in the 1st function)
If we slide the potentiometer to the left, it will make the motors operate at 0% speed (basically it wont move). 
90 is usually the neutral position, but since each ESC has their own neutral position, turning the potentiometer to 0% will set each ESC to their specific neutral position that we defined by the "calib_neutral()" functon. 

---------------------------------------

PARAMETER DEFINATION for 3rd function: 
motorSpeedCalib([index to store the lowest position],[what percent can the motors travelat?] [what ESC to calibrate?])*/

12) int motorSpeedCalib2(int index, float percentage, int stick){}

/*DESCRIPTION
This one was made for the Climbing Event, it basically takes in the LATEST ESC values and limits the power 
(the latest ESC values were created using the first 2 motorSpeedCalib() above and then stored in the ESC structre thing in the If Statement blocks*/


**************************************************************************************************************************************
FUNCTION: Reverse the ESCS
13) int reverseESC(int index, int stick, bool reverse){ }
14) int reverseESC(int index, int stick){}







